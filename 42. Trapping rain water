Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.


Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9


code:

class Solution {
    public int trap(int[] height) {
        int n =height.length;

        int L[]=new int[n];
        L[0]=height[0];
        for (int i=1; i<n;i++){
            L[i]=Math.max(height[i],L[i-1]);
        }

        int R[]=new int[height.length];
        R[n-1]=height[n-1];
        for (int i=n-2; i>=0;i--){
            R[i]=Math.max(height[i],R[i+1]);
        }
        int W=0;
        for(int i=0;i<n;i++){
            int waterL=Math.min (L[i],R[i]);
            W+=waterL-height[i];
        }
        return W;
        
     
        
    }
}
